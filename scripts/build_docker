#!/bin/bash -e
#
# Build/cross-build packages and test Machinekit-HAL in Docker
#
# This script can be run manually or in Travis CI

###########################################################
# Configuration from environment, CL args and defaults
DEFAULT_IMAGE=dovetailautomata/mk-cross-builder
DEFAULT_TAG=amd64_10
CMD=${CMD:-shell}
IMAGE=${IMAGE:-${DEFAULT_IMAGE}}
TAG=${TAG:-${DEFAULT_TAG}}
JOBS=${JOBS:-$(nproc)}
BUILD_SOURCE=${BUILD_SOURCE:-true}  # update Changelog & source pkg

usage() {
    {
        test -z "$*" || echo "$*"
        echo "Usage:  $0 [ arg ... ]"
        echo "  Args:"
        echo "    -i DOCKER-IMAGE       Docker image (default $DEFAULT_IMAGE)"
        echo "    -t DOCKER-TAG         Docker tag (default $DEFAULT_TAG)"
        echo "    -l                    Set 'lcnc_' tag prefix"
        echo "    -x                    Include X environment"
	echo "    -c deb [ -n ]         Build deb packages (-n:  no source pkg)"
        echo "    -c test               Build and test"
        echo "    [-c shell] [ COMMAND ARG ... ]"
        echo "                          (Default) Run COMMAND in shell in"
        echo "                          Docker container; without COMMAND,"
        echo "                          run interactive shell"
        echo "  Tags:"
        echo "    {amd64,i386,arm64,armhf}_{8,9,10}"
    } >&2
    if test -z "$*"; then
        exit 0
    else
        exit 1
    fi
}

# CL arguments
while getopts c:i:t:j:nlxh? opt; do
    case "$opt" in
	c) CMD=$OPTARG ;;
	i) IMAGE=$OPTARG ;;
	t) TAG=$OPTARG ;;
	j) JOBS=$OPTARG ;;
	n) BUILD_SOURCE=false ;;
	l) TAG_PREFIX=lcnc_ ;;
        x) X11=true ;;
	h) usage ;;
	*) usage " " ;;
    esac
done
shift $(($OPTIND - 1))

###########################################################
# Set build parameters

# Arch-specific:
case ${TAG} in
    amd64_*)
	BUILD_OPTS='-b'                  # Build all binary packages
	RUN_TESTS='runtests'             # Run tests on build arch
	;;
    i386_*)                              # Machine arch: i386
	BUILD_OPTS="-a i386"             # - Set machine arch
	;;& # Fall through
    armhf_*)                             # Machine arch: armhf
	BUILD_OPTS="-a armhf"            # - Set machine arch
	;;& # Fall through
    arm64_*)                             # Machine arch: arm64
	BUILD_OPTS="-a arm64"            # - Set machine arch
	;;& # Fall through
    i386_*|arm*)                         # Cross-compile/foreign arch
	BUILD_OPTS+=" -B"                # - Only build arch binary packages
	BUILD_OPTS+=" -d"                # - Root fs missing build deps; force
	RUN_TESTS='true'                 # - Don't run tests
	BUILD_SOURCE=false               # - Don't build source package
	;;
    *) echo "Warning:  unknown tag '${TAG}'" >&2 ;;
esac

# Distro specific warnings level
case ${TAG} in
    *_8|*_9)
	WERROR_FLAG="-Werror"
	;;
    *)
	WERROR_FLAG=""  # Buster and above have many as yet unresolved warnings
	;;
esac

# DH_VERBOSE turn on verbose package debuilds
! ${MK_PACKAGE_VERBOSE:-false} || export DH_VERBOSE=1

# Parallel jobs in `make`
export DEB_BUILD_OPTIONS="parallel=${JOBS}"

# UID/GID to carry into Docker
UID_GID=${UID_GID:-`id -u`:`id -g`}

# Bind source directory:  parent of $PWD for packages
BIND_SOURCE_DIR="$(readlink -f $PWD/..)"

# Directory containing this script
SCRIPT_DIR="$(dirname $0)"

# Make TAG accessible to called programs
export TAG

###########################################################
# Generate command line

declare -a BUILD_CL DOCKER_EXTRA_OPTS
case $CMD in
    "shell"|"") # Interactive shell (default)
	DOCKER_EXTRA_OPTS=( --privileged --interactive )
	if test -z "$*"; then
	    BUILD_CL=( bash -i )
	else
	    BUILD_CL=( "$@" )
	fi
	;;
    "deb") # Build Debian packages
	DOCKER_EXTRA_OPTS=(
	    # Used in dpkg-buildpackage
	    -e DEB_BUILD_OPTIONS=$DEB_BUILD_OPTIONS
	    -e DH_VERBOSE=$DH_VERBOSE
	    # Used in scripts/build_source_package
	    -e DEBIAN_SUITE=$DEBIAN_SUITE
	    -e MAJOR_MINOR_VERSION=$MAJOR_MINOR_VERSION
	    -e PKGSOURCE=$PKGSOURCE
	    -e REPO_URL=$REPO_URL
	    -e TRAVIS_BRANCH=$TRAVIS_BRANCH
	    -e TRAVIS_PULL_REQUEST=$TRAVIS_PULL_REQUEST
	    -e TRAVIS_REPO=$TRAVIS_REPO
	    -e TRAVIS_REPO_SLUG=$TRAVIS_REPO_SLUG
            -e DPKG_CFLAGS="${DPKG_CFLAGS} ${WERROR_FLAG}"
	)

	BUILD_CL=( bash -xec "
            # clean git tree
            git clean -xdf
            find tests -name pipe-std\* -delete

            # configure source package
            debian/configure;

            # update Changelog and build source package
            $SCRIPT_DIR/build_source_package $BUILD_SOURCE

            # build binary packages
            dpkg-buildpackage -uc -us ${BUILD_OPTS} -j$JOBS
            "
	)
	;;
    "test") # RIP build and regression tests
	if test "$TEST_DEBUG" = true; then
	    DOCKER_EXTRA_OPTS=( -e MSGD_OPTS=-s -e DEBUG=5 )
	fi
	TEST_ARGS="${TEST_ARGS:-tests}"
	BUILD_CL=( bash -xec "
            # Set up build:  \`autoconf\` and \`make\`
	    (
		cd src;
		./autogen.sh;
		./configure --host=\$HOST_MULTIARCH;
	    )

            # Build
	    make -C src -j${JOBS};

            # Set up runtime:  setuid, environment, ini
	    sudo make -C src setuid || true;  # Don't exit if this fails
	    . scripts/rip-environment;
	    echo -e 'ANNOUNCE_IPV4=0\nANNOUNCE_IPV6=0' >> \
		etc/machinekit/machinekit.ini;
	    tail -2 etc/machinekit/machinekit.ini;

            # Run regression tests
	    ${RUN_TESTS} ${TEST_ARGS}"
	)
	;;
    "test-lcnc") # Build and test LCNC
	BUILD_CL=( bash -xec "
            # Check out LCNC code
            rm -rf linuxcnc  # Remove any stale tree
            git clone https://github.com/zultron/machinekit.git \
                --branch zultron/2019-07-03-2.8-mk-hal-build \
                --depth 1 \
                linuxcnc;
	    cd linuxcnc;

            # Install LCNC build deps
            debian/configure machinekit-hal no-docs;
            mk-build-deps debian/control;
            sudo apt-get install -y ./*.deb;

            # Build LCNC
            cd src;
	    ./autogen.sh;
	    ./configure --with-hal=machinekit-hal;
            make -j\$(nproc);
            sudo make install;

            # Run tests
            source ../scripts/rip-environment
            runtests ../tests
            "
	         )
        TAG_PREFIX=lcnc_
        ;;
    "docs") # Just build docs
	BUILD_CL=( bash -xec "
	    cd src ;
	    ./autogen.sh ;
	    ./configure --enable-build-documentation ;
	    make docpages i_docpages ;"
	)
	;;
    "coverity") # Run SYNOPSYS Coverity Scan, requires folder scs_analysis_tool folder with SYNOPSYS Coverity Analysis tool to be present in Machinekit-HAL root folder
	BUILD_CL=( bash -xec "
		export PATH=$PATH:$(echo $(pwd))/scs_analysis_tool/bin ;
	    (
		cd src ;
		./autogen.sh ;
		./configure ;
	    )
	    cov-build --dir cov-int make -C src -j${JOBS} ;
		tar czvf machinekit-hal-coverity.tgz cov-int ;"
	)
	;;
    *)   echo "Unknown command '$CMD'" >&2; exit 1 ;;
esac

if ${X11:-false}; then
    DOCKER_EXTRA_OPTS+=(
        -e DISPLAY
        -v /tmp/.X11-unix:/tmp/.X11-unix
        -v /dev/dri:/dev/dri
    )
fi

DOCKER_EXTRA_OPTS+=( $DOCKER_RUN_ARGS )

###########################################################
# Run build

set -x  # Show user the command

# Run the Docker container as follows:
# - Remove container after exit
# - Run interactively with terminal
# - Add any `DOCKER_EXTRA_OPTS` from above
# - As Travis CI user/group
# - Bind-mount home and source directories; start in source directory
# - Pass environment variable `TAG`
# - Set hostname to $IMAGE:$TAG (replace `/` and `:` with `-`)
# - Run build command as set above
# hide --it

exec docker run \
    --rm \
    --tty \
    "${DOCKER_EXTRA_OPTS[@]}" \
    -u ${UID_GID} -e USER=${USER} \
    -v ${HOME}:${HOME} -e HOME=${HOME} \
    -v ${BIND_SOURCE_DIR}:${BIND_SOURCE_DIR} -w ${PWD} \
    -e TAG=${TAG} \
    -h ${IMAGE//[\/:]/-}-${TAG} \
    ${IMAGE}:${TAG_PREFIX}${TAG} \
    "${BUILD_CL[@]}"
